%{
#include "hw3_output.hpp"
#include "SymbolTable.hpp"
#include "tokenTypes.hpp"
#include "bp.hpp"
#include "code_gen.hpp"
#define YYSTYPE Node*
using namespace output;
#include <iostream>
using namespace std;

int yyerror(const char * message);
extern int yylineno;
extern int yylex();
extern char* yytext;
extern CodeBuffer& buffer;
SymbolTable st;
int in_loop = 0;

void handle_binop(Exp* exp1, Exp* exp2){
    if ((!exp1->is_numeric()) || (!exp2->is_numeric()))
    {
        errorMismatch(yylineno);
        delete(exp1); delete(exp2);
        exit(1);
    }
}

void handle_relop(Exp* exp1, Exp* exp2){
    if ((!exp1->is_numeric()) || (!exp2->is_numeric()))
    {
        errorMismatch(yylineno);
        delete(exp1); delete(exp2);
        exit(1);
    }
}

bool can_assign_types(string type1, string type2){
    //true if type2 can be assigned into type1
    return (type1 == type2) || (type1 == "INT" && type2 == "BYTE");
}

void handle_logic(Exp* exp1, Exp* exp2){
    if((!exp1->is_logic()) || (!exp2->is_logic()))
    {
        errorMismatch(yylineno);
        delete(exp1); delete(exp2);
        exit(1);
    }
}

bool int_or_byte(string type){return type == "INT" || type == "BYTE";}

bool can_be_casted(string from, string to){
    if (from == to) return true;
    return int_or_byte(from) && int_or_byte(to);
}


%}


%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token TRUE
%token FALSE
%token RETURN
%nonassoc IF
%nonassoc ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token NUM
%token STRING
%token ID
%right ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELOP
%left ADDSUB
%left MULDIV
%right NOT
%left RPAREN
%left LPAREN
%token LBRACE
%token RBRACE

%%
Program : Funcs                                                            {};
Funcs :                                                                    {};
Funcs : FuncDecl Funcs                                                     {};

FuncDecl : RetType ID LPAREN Formals RPAREN {
    string func_name = ((Value*)$2)->get_str();
    string ret_type = ((Value*)$1)->get_str();
    delete($1); delete($2);
    vector<string> arg_types;
    vector<string> arg_names;
    vector<bool> arg_consts;
    FormalDecl* fd = (FormalDecl*)$4;
    while(fd)
    {
        arg_types.push_back(fd->get_type());
        arg_names.push_back(fd->get_id());
        arg_consts.push_back(fd->get_const());
        FormalDecl* to_delete = fd;
        fd = (FormalDecl*)fd->next;
        delete(to_delete);
    }
    if(!(st.add_function(func_name, ret_type, arg_types))){
        errorDef(yylineno, func_name);
        exit(1);
    }
    st.new_scope();
    string add_args_res = st.add_function_args_symbols(arg_names, arg_types, arg_consts);
    if(add_args_res != ""){
        errorDef(yylineno, add_args_res);
        exit(1);
    }
    //emit delcaration
    string llvm_type = (ret_type != "VOID") ? "i32" : "void";
    string decl = "define " + llvm_type + " @" + func_name + "(";
    for(size_t i = 0; i < arg_types.size(); i++){
      decl += (i == arg_types.size()-1) ? "i32" : "i32, ";
    }
    decl += ") {\n";
    reg function_sp = allocate_register();
    decl += (function_sp + " = alloca [50 x i32]");
    buffer.emit(decl);
}
           LBRACE Statements RBRACE {
            st.delete_scope();
            //emit function finish
            string ret_type = ((Value*)$1)->get_str();
            buffer.emit("ret " + (ret_type == "VOID") ? "void" : "i32 0");
            buffer.emit("}");
           };

RetType : Type {$$ = $1;};
   | VOID {$$ = new Value("VOID");};

Formals : {$$ = NULL;}
     | FormalsList {$$ = $1;};

FormalsList : FormalDecl { $$ = $1;};
           |FormalDecl COMMA FormalsList {$$ = $1; $$->next = $3;};

// TODO: check what to do with const
FormalDecl : TypeAnnotation Type ID {
   string name = ((Value*)$3)->get_str();
   string type = ((Value*)$2)->get_str();
   bool constvar = ((ConstType*)$1)->get_const();
   $$ = new FormalDecl(type, name, constvar);
   delete($1);
   delete($2); delete($3); };


Statements : Statement  {$$ = $1;}
           |Statements M Statement   {
           $$ = new Statement(buffer.merge(((Statement*)$1)->break_list, ((Statement*)$3)->break_list), buffer.merge(((Statement*)$1)->continue_list, ((Statement*)$3)->continue_list));
           delete($1); delete($2); delete($3);
           };

Statement : LBRACE NewScope Statements RBRACE DeleteScope { $$ = $3; };

// TODO: check what to do with const
Statement : TypeAnnotation Type ID SC {
    string name = ((Value*)$3)->get_str();
    string type = ((Value*)$2)->get_str();
    bool constvar = ((ConstType*)$1)->get_const();
    delete($1);
    delete($2); delete($3);
    if(constvar){
      errorConstDef(yylineno);
      exit(1);
    }
    if(!st.add_symbol(name, type, constvar)){
        errorDef(yylineno, name);
        exit(1);
    }
    emitStore(name, type, "0");
    $$ = new Statement();
 };

Statement : TypeAnnotation Type ID ASSIGN Exp SC {
   string name = ((Value*)$3)->get_str();
   string type = ((Value*)$2)->get_str();
   bool constvar = ((ConstType*)$1)->get_const();
   string exp_type = ((Exp*)$5)->get_type();
   delete($1);
   delete($2); delete($3); delete($5);
   if(can_assign_types(type, exp_type)) {
       if(!st.add_symbol(name, type, constvar)){
           errorDef(yylineno, name);
           exit(1);
       }
   } else {
       errorMismatch(yylineno);
       exit(1);
   }
   if (type == "BOOL") bool_handler((Exp*)$5);
   emitStore(name, type, ((Exp*)$5)->get_reg());
   $$ = new Statement();
   };

Statement : ID ASSIGN Exp SC    {
   string id = ((Value*)$1)->get_str();
   string type = st.get_type_by_id(id);
   bool constID = st.get_const_by_id(id);
   string exp_type = ((Exp*)$3)->get_type();
   delete($1); delete($3);
   if(type == "ERROR" || st.get_function_by_id(id)){
       errorUndef(yylineno, id);
       exit(1);
   }
   if(!can_assign_types(type, exp_type)){
       errorMismatch(yylineno);
       exit(1);
   }
   if(constID){
      errorConstMismatch(yylineno);
      exit(1);
   }
   if (type == "BOOL") bool_handler((Exp*)$3);
   emitStore(id, type, ((Exp*)$3)->get_reg());
   $$ = new Statement();
};


Statement : Call SC {$$ = new Statement();};

Statement : RETURN SC   {
    if(st.last_func_return_type != "VOID"){
        errorMismatch(yylineno);
        exit(1);
    }
    buffer.emit("ret void");
    $$ = new Statement();
};

Statement : RETURN Exp SC   {
    string exp_type = ((Exp*)$2)->get_type();
    delete($2);
    if(exp_type == "VOID" || !can_assign_types(st.last_func_return_type, exp_type)){
        errorMismatch(yylineno);
        exit(1);
    }
    if (exp_type == "BOOL") bool_handler((Exp*)$2);
    $$ = new Statement();
    buffer.emit("ret i32 " + ((Exp*)$2)->get_reg());
};

Statement : IF CheckBoolScope M NewScope Statement DeleteScope %prec IF   {
  buffer.bpatch(((Exp*)$2)->true_list, ((M*)$3)->next);
  int branch = buffer.emit("br label @\n");
  bpList next_list = buffer.makelist(bpItem(branch, FIRST));
  buffer.bpatch(buffer.merge(next_list, ((Exp*)$2)->false_list), buffer.genLabel());
  $$ = new Statement(((Statement*)$5)->continue_list, ((Statement*)$5)->break_list);
  delete($2); delete($3); delete($5);
  } ;
Statement : IF CheckBoolScope M NewScope Statement DeleteScope ELSE N M NewScope Statement DeleteScope M {
  cout << "firstbp" << endl;
  buffer.bpatch(((Exp*)$2)->true_list, ((M*)$3)->next);
  cout << "secondbp" << endl;
  buffer.bpatch(((Exp*)$2)->false_list, ((M*)$9)->next);
  cout << "thirdbp" << endl;
  buffer.bpatch(((N*)$8)->next_list, ((M*)$13)->next);
  cout << "forthbp" << endl;
  bpList cont_l = buffer.merge(((Statement*)$5)->continue_list, ((Statement*)$11)->continue_list);
  bpList break_l = buffer.merge(((Statement*)$5)->break_list, ((Statement*)$11)->break_list);
  delete($2); delete($3); delete($5); delete($8); delete($9); delete($11); delete($13);
  $$ = new Statement(cont_l, break_l);
};
Statement : WHILE {in_loop++;} M CheckBoolScope NewScope M Statement N M DeleteScope {
  in_loop--;
  buffer.bpatch(((Exp*)$4)->false_list, ((M*)$9)->next);
  buffer.bpatch(((Exp*)$4)->true_list, ((M*)$6)->next);
  buffer.bpatch(((N*)$8)->next_list, ((M*)$3)->next); // loop
  buffer.bpatch(((Statement*)$7)->continue_list, ((M*)$3)->next);
  buffer.bpatch(((Statement*)$7)->break_list, ((M*)$9)->next);
  delete($3); delete($4); delete($6); delete($7); delete($8); delete($9);
  $$ = new Statement();
 } ;

Statement : BREAK N SC{
    if(!in_loop){
        errorUnexpectedBreak(yylineno);
        exit(1);
     }
    $$ = new Statement(((N*)$2)->next_list, bpList());
    delete($2);
    } ;

Statement : CONTINUE N SC{
    if(!in_loop){
        errorUnexpectedContinue(yylineno);
        exit(1);
     }
     $$ = new Statement(bpList(), ((N*)$2)->next_list);
     delete($2);
    };


Call : ID LPAREN ExpList RPAREN {
    string func_id = ((Value*)$1)->get_str();
    delete($1);
    vector<string> param_types;
    vector<reg> param_regs;
    while($3){
        param_types.push_back(((Exp*)$3)->get_type());
        param_regs.push_back(((Exp*)$3)->get_reg());
        Exp* to_delete = ((Exp*)$3);
        $3 = ((Exp*)$3)->next;
        delete to_delete;
    }
    Function* func = st.get_function_by_id(func_id);
    if(!func){
        errorUndefFunc(yylineno, func_id);
        exit(1);
    }
    auto args_types = func->get_args_types();
    if(args_types.size() != param_types.size()){
        errorPrototypeMismatch(yylineno, func_id, args_types);
        exit(1);
    }
    for(size_t i = 0; i < args_types.size(); i++){
        if(!can_assign_types(args_types[i], param_types[i])){
            errorPrototypeMismatch(yylineno, func_id, args_types);
            exit(1);
        }
    }
    // emit call function
    $$ = emitCallFunc(func->get_type(), func_id, param_types, param_regs);
} ;

Call : ID LPAREN RPAREN {
    string func_id = ((Value*)$1)->get_str();
    delete($1);
    Function* func = st.get_function_by_id(func_id);
    if(!func){
        errorUndefFunc(yylineno, func_id);
        exit(1);
    }
    auto args_types = func->get_args_types();
    if(args_types.size() != 0){
        errorPrototypeMismatch(yylineno, func_id, args_types);
        exit(1);
    }
    $$ = emitCallFunc(func->get_type(), func_id);
} ;

ExpList : Exp   {
  string type = ((Exp*)$1)->get_type();
  if (type == "BOOL") bool_handler(((Exp*)$1));
  $$ = $1;
};
ExpList : Exp {
  string type = ((Exp*)$1)->get_type();
  if (type == "BOOL") bool_handler(((Exp*)$1));
  } COMMA ExpList {$$ = $1; $$->next = $4;};


Type : INT  { $$ = new Value("INT"); };
Type : BYTE { $$ = new Value("BYTE"); };
Type : BOOL { $$ = new Value("BOOL"); };

TypeAnnotation :                                                                {$$ = new ConstType(false);};
TypeAnnotation : CONST                                                          {$$ = new ConstType(true);};

Exp : LPAREN Exp RPAREN { $$ = $2; };

Exp : Exp ADDSUB Exp {
    handle_binop((Exp*)$1, (Exp*)$3);
    $$ = emitAddSub((Exp*)$1, (Value*)$2, (Exp*)$3);
    delete($1); delete($2); delete($3);
 };

Exp : Exp MULDIV Exp {
    handle_binop((Exp*)$1, (Exp*)$3);
    $$ = emitMulDiv((Exp*)$1, (Value*)$2, (Exp*)$3);
    delete($1); delete($2); delete($3);
};

Exp : ID  {
    string id_name = ((Value*)$1)->get_str();
    string type = st.get_type_by_id(id_name);
    delete($1);
    if (type == "ERROR" || st.get_function_by_id(id_name)) {
        errorUndef(yylineno, id_name);
        exit(1);
    }
    $$ = emitLoad(id_name, type);
    };

Exp : Call  { $$ = $1; };

Exp : NUM {
  $$ = new Exp("INT", to_string(((Value*)$1)->get_num()));
  delete($1);
 };

Exp : NUM B {
    int value = ((Value*)$1)->get_num();
    delete($1);
    if(value > 255){
        errorByteTooLarge(yylineno, to_string(value));
        exit(1);
    }
    $$ = new Exp("BYTE", to_string(value)); };

Exp : STRING {
  reg new_global_reg = allocate_global_register();
  int length = ((Value*)$1)->get_str().length();
  string length_str = to_string(length - 1);
  buffer.emitGlobal("@" + new_global_reg + " = internal constant [" + length_str + " x i8] c\"" + ((Value*)$1)->get_str().substr(1,length-2) + "\\00\"");
  reg new_reg = allocate_register();
  buffer.emit(new_reg + " = getelementptr [" + length_str + " x i8], [" + length_str + " x i8]* " + new_global_reg + ", i32 0, i32 0");
  $$ = new Exp("STRING", new_reg);
};
Exp : TRUE {
  int branch = buffer.emit("br label @");
  $$ = new Exp("BOOL", "1", buffer.makelist(bpItem(branch, FIRST)));
};
Exp : FALSE {
  int branch = buffer.emit("br label @");
  Exp* new_exp = new Exp("BOOL", "0");
  new_exp->false_list = buffer.makelist(bpItem(branch, FIRST));
  $$ = new_exp;
};

Exp : NOT Exp {
        if (!((Exp*)$2)->is_logic())
        {
            errorMismatch(yylineno);
            delete($2);
            exit(1);
        }
        bpList tmp_false_list = ((Exp*)$2)->false_list;
        ((Exp*)$2)->false_list = ((Exp*)$2)->true_list;
        ((Exp*)$2)->true_list = tmp_false_list;
        $$ = $2;
     };

Exp : Exp AND M Exp {
    handle_logic((Exp*)$1, (Exp*)$3);
    buffer.bpatch(((Exp*)$1)->true_list, ((M*)$3)->next);
    $$ = new Exp("BOOL", "", ((Exp*)$4)->true_list, buffer.merge(((Exp*)$1)->false_list, ((Exp*)$4)->false_list));
    delete($1); delete($3); delete($4);
};

Exp : Exp OR {if (((Exp*)$1)->get_type() == "BOOL") bool_handler((Exp*)$1); } M Exp {
  handle_logic((Exp*)$1, (Exp*)$3);
  buffer.bpatch(((Exp*)$1)->false_list, ((M*)$4)->next);
  $$ = new Exp("BOOL", "", buffer.merge(((Exp*)$1)->true_list, ((Exp*)$5)->true_list), ((Exp*)$5)->false_list);
  delete($1); delete($4); delete($5);
}


Exp : Exp EQUALITY Exp {
    handle_relop((Exp*)$1, (Exp*)$3);
    $$ = emitRelop((Exp*)$1, (Value*)$2, (Exp*)$3);
    delete($1); delete($2); delete($3);
 };


Exp : Exp RELOP Exp  {
    handle_relop((Exp*)$1, (Exp*)$3);
    $$ = emitRelop((Exp*)$1, (Value*)$2, (Exp*)$3);
    delete($1); delete($2); delete($3);
 };

// TODO: think about casting logic.
Exp : LPAREN Type RPAREN Exp{
  string to_type = ((Value*)$2)->get_str();
  string from_type = ((Exp*)$4)->get_type();
  delete($2); delete($4);
  if(!(can_be_casted(from_type, to_type))){
      errorMismatch(yylineno);
      exit(1);
  }
  $$ = new Exp(to_type, allocate_register());
};

//TODO: check if need to be replaced to back.
CheckBoolScope : LPAREN Exp RPAREN{
    if(!((Exp*)$2)->is_logic()){
        delete($2);
        errorMismatch(yylineno);
        exit(1);
    }
    $$ = $2;
}  ;

NewScope: {st.new_scope();};
DeleteScope: {st.delete_scope();} ;
M: N { string next_label = buffer.genLabel(); buffer.bpatch(((N*)$1)->next_list, next_label ); delete($1); $$ = new M(next_label); };
N: { int branch = buffer.emit("br label @\n");
$$ = new N(buffer.makelist(bpItem(branch, FIRST)));
};
%%


int main (){
    yyparse();

    printf("%d", 42);
    initBuffer();
    if (!st.was_main_declared)
    {
        errorMainMissing();
        exit(1);
    }
    buffer.printGlobalBuffer();
    buffer.printCodeBuffer();
    st.delete_scope();
}


int yyerror(const char * message){
    errorSyn(yylineno);
    exit(1);
}
