%{
#include "output.hpp"

using namespace output;

int yyerror(const char * message);
extern int yylineno;
extern int yylex();
%}


%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token CONST
%token TRUE
%token FALSE
%token RETURN
%nonassoc IF
%nonassoc ELSE
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token NUM
%token STRING
%token ID
%right ASSIGN
%left OR
%left AND
%left EQUALITY
%nonassoc RELOP
%left ADDSUB
%left MULDIV
%right NOT
%left RPAREN
%left LPAREN
%token LBRACE
%token RBRACE

%%
Program : Funcs                                                                 { printProductionRule(1); };
Funcs :                                                                         { printProductionRule(2); };
Funcs : FuncDecl Funcs                                                          { printProductionRule(3); };
FuncDecl : RetType ID LPAREN Formals RPAREN LBRACE Statements RBRACE            { printProductionRule(4); };
RetType : Type                                                                  { printProductionRule(5); };
RetType :  VOID                                                                 { printProductionRule(6); };
Formals :                                                                       { printProductionRule(7); };
Formals : FormalsList                                                           { printProductionRule(8); };
FormalsList : FormalDecl                                                        { printProductionRule(9); };
FormalsList : FormalDecl COMMA FormalsList                                      { printProductionRule(10); };
FormalDecl : TypeAnnotation Type ID                                             { printProductionRule(11); };
Statements : Statement                                                          { printProductionRule(12); };
Statements : Statements Statement                                               { printProductionRule(13); };
Statement : LBRACE Statements RBRACE                                            { printProductionRule(14); };
Statement : TypeAnnotation Type ID SC                                           { printProductionRule(15); };
Statement : TypeAnnotation Type ID ASSIGN Exp SC                                { printProductionRule(16); };
Statement : ID ASSIGN Exp SC                                                    { printProductionRule(17); };
Statement : Call SC                                                             { printProductionRule(18); };
Statement : RETURN SC                                                           { printProductionRule(19); };
Statement : RETURN Exp SC                                                       { printProductionRule(20); };
Statement : IF LPAREN Exp RPAREN Statement %prec IF                             { printProductionRule(21); };
Statement : IF LPAREN Exp RPAREN Statement ELSE Statement                       { printProductionRule(22); };
Statement : WHILE LPAREN Exp RPAREN Statement                                   { printProductionRule(23); };
Statement : BREAK SC                                                            { printProductionRule(24); };
Statement : CONTINUE SC                                                         { printProductionRule(25); };
Call : ID LPAREN ExpList RPAREN                                                 { printProductionRule(26); };
Call : ID LPAREN RPAREN                                                         { printProductionRule(27); };
ExpList : Exp                                                                   { printProductionRule(28); };
ExpList : Exp COMMA ExpList                                                     { printProductionRule(29); };
Type : INT                                                                      { printProductionRule(30); };
Type : BYTE                                                                     { printProductionRule(31); };
Type : BOOL                                                                     { printProductionRule(32); };
TypeAnnotation :                                                                { printProductionRule(33); };
TypeAnnotation : CONST                                                          { printProductionRule(34); };
Exp : LPAREN Exp RPAREN                                                         { printProductionRule(35); };
Exp : Exp ADDSUB Exp                                                            { printProductionRule(36); };
Exp : Exp MULDIV Exp                                                            { printProductionRule(36); };
Exp : ID                                                                        { printProductionRule(37); };
Exp : Call                                                                      { printProductionRule(38); };
Exp : NUM                                                                       { printProductionRule(39); };
Exp : NUM B                                                                     { printProductionRule(40); };
Exp : STRING                                                                    { printProductionRule(41); };
Exp : TRUE                                                                      { printProductionRule(42); };
Exp : FALSE                                                                     { printProductionRule(43); };
Exp : NOT Exp                                                                   { printProductionRule(44); };
Exp : Exp AND Exp                                                               { printProductionRule(45); };
Exp : Exp OR Exp                                                                { printProductionRule(46); };
Exp : Exp EQUALITY Exp                                                          { printProductionRule(47); };
Exp : Exp RELOP Exp                                                             { printProductionRule(47); };
Exp : LPAREN TypeAnnotation Type RPAREN Exp                                     { printProductionRule(48); };
%%


int main (){
    return yyparse();
};

int yyerror(const char * message){
    errorSyn(yylineno);
}
